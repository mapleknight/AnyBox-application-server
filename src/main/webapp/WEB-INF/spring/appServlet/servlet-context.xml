<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<beans:bean  
	    class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
	</beans:bean>
	<!-- Configure to plugin JSON as request and response in method handler -->
    <beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <beans:property name="messageConverters">
            <beans:list>
                <beans:ref bean="jsonMessageConverter"/>
            </beans:list>
        </beans:property>
    </beans:bean>
    
    <!-- <beans:bean id="handlerExceptionResolver" class="com.anybox.controller.GlobalExceptionHandler">
		<beans:property name="messageConverters" ref="jsonMessageConverter"/> 见上一篇，有定义过，标有@ResponseBody被此messageConverters输出
	</beans:bean> -->
     
    <!-- Configure bean to convert JSON to POJO and vice versa -->
    <beans:bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
    </beans:bean> 
    <!-- <beans:bean id="jsonMessageConverter" class="com.anybox.controller.AddHeaderMappingJacksonHttpMessageConverter">
    </beans:bean> -->
    
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url"
			value="jdbc:mysql://localhost:3306/anybox" />
		<beans:property name="username" value="anybox" />
		<beans:property name="password" value="anybox" />
	</beans:bean>

	<!-- Hibernate 4 SessionFactory Bean definition -->
	<beans:bean id="hibernate4AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="annotatedClasses">
			<beans:list>
				<beans:value>com.anybox.model.Customer</beans:value>
				<beans:value>com.anybox.model.User</beans:value>
				<beans:value>com.anybox.model.Product</beans:value>
				<beans:value>com.anybox.model.Category</beans:value>
				<beans:value>com.anybox.model.Machine</beans:value>
				<beans:value>com.anybox.model.Tray</beans:value>
				<beans:value>com.anybox.model.Inventory</beans:value>
				<beans:value>com.anybox.model.Order</beans:value>
				<beans:value>com.anybox.model.OrderDetail</beans:value>
				<beans:value>com.anybox.model.PreorderRecord</beans:value>
				<beans:value>com.anybox.model.EventCard</beans:value>
				<beans:value>com.anybox.model.Policy</beans:value>
				<beans:value>com.anybox.model.FreeLunch</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect
				</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
	<beans:bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
	
	<beans:bean id="customerDAO" class="com.anybox.dao.CustomerDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	<beans:bean id="customerService" class="com.anybox.service.CustomerServiceImpl">
		<beans:property name="customerDAO" ref="customerDAO"></beans:property>
	</beans:bean>
	
	<beans:bean id="userDAO" class="com.anybox.dao.UserDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	<beans:bean id="userService" class="com.anybox.service.UserServiceImpl">
	</beans:bean>
	
	<beans:bean id="productDAO" class="com.anybox.dao.ProductDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	<beans:bean id="productService" class="com.anybox.service.ProductServiceImpl">
	</beans:bean>
	
	<beans:bean id="categoryDAO" class="com.anybox.dao.CategoryDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	<beans:bean id="categoryService" class="com.anybox.service.CategoryServiceImpl">
	</beans:bean>
	
	<beans:bean id="trayDAO" class="com.anybox.dao.TrayDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	<beans:bean id="trayService" class="com.anybox.service.TrayServiceImpl">
	</beans:bean>
	
	<beans:bean id="machineDAO" class="com.anybox.dao.MachineDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	<beans:bean id="machineService" class="com.anybox.service.MachineServiceImpl">
	</beans:bean>
	
	<beans:bean id="inventoryDAO" class="com.anybox.dao.InventoryDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
	<beans:bean id="orderDAO" class="com.anybox.dao.OrderDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	<beans:bean id="orderService" class="com.anybox.service.OrderServiceImpl">
	</beans:bean>
	
	<beans:bean id="orderDetailDAO" class="com.anybox.dao.OrderDetailDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
	<beans:bean id="preorderRecordDAO" class="com.anybox.dao.PreorderRecordDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
	<beans:bean id="policyDAO" class="com.anybox.dao.PolicyDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
	<beans:bean id="eventCardDAO" class="com.anybox.dao.EventCardDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	<beans:bean id="eventCardService" class="com.anybox.service.EventCardServiceImpl">
	</beans:bean>
	
	<beans:bean id="freeLunchDAO" class="com.anybox.dao.FreeLunchDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
	
	<beans:bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
         <!-- setting maximum upload size -->
        <beans:property name="maxUploadSize" value="20000000" />
    </beans:bean>
	
	
	<context:component-scan base-package="com.anybox" />
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>

</beans:beans>
